<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	backgroundColor="white"
	layout="absolute" 
	creationPolicy="all" 
	height="100%" width="100%" 
	applicationComplete="init()"
	xmlns:cv="customValidators.*"
	defaultButton="{call}">

	<mx:Script>
		<![CDATA[
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			/**
			 * Main class/dialog
			 * 
			 * This program is free software. It comes without any warranty, to
			 * the extent permitted by applicable law. You can redistribute it
			 * and/or modify it under the terms of the Do What The Fuck You Want
			 * To Public License, Version 2, as published by Sam Hocevar. See
			 * http://sam.zoy.org/wtfpl/COPYING for more details.
			 * 
			 * @author Jordi Boggiano <j.boggiano@seld.be>
			 */			
			
			import mx.controls.Label;
			import mx.controls.Alert;
			import mx.messaging.channels.AMFChannel;
			import com.adobe.serialization.json.JSON;
			
 			// Import the debugger
//			import nl.demonsters.debugger.MonsterDebugger;
			
			public var api:AMFConnector;
			protected var methods:Array;
			protected var introspector:String;
			
			public var rooturl:String;
			
			[Bindable]
			public var argumentToolTip:String = "You can use JSON syntax for method arguments ie. an array is written like this [item1, item2, etc.] objects are written {\"propname\":value, \"propname2\":value2, etc}";
			
			// Variable to hold the debugger
//			private var debugger:MonsterDebugger;

			/**
			 * restores the last settings if available
			 */
			public function init():void
			{
				// Init the debugger
//				debugger = new MonsterDebugger(this);
				
				// Send a simple trace
//				MonsterDebugger.trace(this, "Hello World!");
				
				var so:SharedObject = SharedObject.getLocal('AMFTester');
				if (so.data.token) {
					token.text = so.data.token;
				}
				if (so.data.username) {
					username.text = so.data.username;
					password.text = so.data.password;
				}
				if (so.data.mode == 'username'){
					loginType.selectedIndex = 1;
				}
				this.rememberpassword.selected = so.data.rememberpassword;
				this.remembertoken.selected = so.data.remembertoken;
				this.rooturl = Application.application.parameters.rooturl;
				this.urllabel1.text = 'Root URL :'+this.rooturl;
				this.urllabel2.text = 'Root URL :'+this.rooturl;
				
			}
			public function doConnectToken():void
			{
				var url:String = this.rooturl + '/webservice/amf/server.php?'+
									'wstoken='+this.token.text;
				this.doConnect(url);
				// saving settings for next time
				var so:SharedObject = SharedObject.getLocal('AMFTester');
				if (this.rememberpassword.selected == true ){
					so.setProperty('token', this.token.text);
				} else {
					so.setProperty('token', null);//delete shared obj prop
				}
				so.setProperty('remembertoken', this.remembertoken.selected);
				so.setProperty('mode', 'token');
				so.flush();
			}
			public function doConnectUsername():void
			{
				var url:String = this.rooturl + '/webservice/amf/simpleserver.php?'+
							'wsusername=' + this.username.text+
							'&wspassword=' +  this.password.text;
				this.doConnect(url);
				// saving settings for next time
				var so:SharedObject = SharedObject.getLocal('AMFTester');
				if (this.rememberpassword.selected == true ){
					so.setProperty('username', this.username.text);
					so.setProperty('password', this.password.text);
				} else {
					so.setProperty('username', null);//delete shared obj prop
					so.setProperty('password', null);
				}
				so.setProperty('rememberpassword', this.rememberpassword.selected);
				so.setProperty('mode', 'username');
				so.flush();
			}
			
			/**
			 * initializes the connection
			 */
			private function doConnect(url:String):void
			{
				api = new AMFConnector(url);
				api.exec('MethodDescriptor.getMethods');
				api.addEventListener(Event.COMPLETE, handleConnection);
				if (!api.hasEventListener(NetStatusEvent.NET_STATUS)) {
					api.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
					api.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
					api.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				}
				this.panelDebug.enabled = false;
			}
			
			/**
			 * initializes the debugger dialog with the method list and everything
			 */
			protected function handleConnection(event:Event):void
			{
				methods = [];
				for (var cls:String in api.data) {
					for (var meth:String in api.data[cls]['methods']) {
						methods.push({label: cls+'.'+meth, docs: api.data[cls]['methods'][meth]['docs'], args: api.data[cls]['methods'][meth]['params']});
					}
				}
				
				this.panelDebug.enabled = true;
				this.maintabs.selectedIndex = 1;
				func.dataProvider = methods;
				api.removeEventListener(Event.COMPLETE, handleConnection);
				api.addEventListener(Event.COMPLETE, process);
				reloadArgs();
				
			}
			
			
			/**
			 * outputs a response from the server
			 */
			protected function process(event:Event):void
			{
				if (api.error) {
					push(input, time() + ": Exception (faultString: "+api.data.faultString+", extendedData: "+api.data.extendedData+", faultDetail: "+api.data.faultDetail+")\n");
				} else {
					push(input, time() + ": "+JSON.encode(api.data)+"\n");
				}
//				MonsterDebugger.trace(this, {"data":api.data, "error":api.error});
//				MonsterDebugger.trace(this, api.data);
			}
			
			/**
			 * updates the display of arguments when the selected method changes
			 * 
			 * it's hardly optimal to do it that way but it was faster to copy paste, I just hope nobody needs more than 7 args
			 */
			protected function reloadArgs():void
			{
				var i:int;
				for (i = 1; i <= 7; i++) {
					this['arg'+i].visible = false;
					this['arg'+i].includeInLayout = false;
					this['larg'+i].visible = false;
					this['larg'+i].includeInLayout = false;
					this['JSONV'+i].enabled = false;
				}
				i = 1;
				for (var arg:String in func.selectedItem.args) {
					(this['arg'+i] as TextInput).visible = true;
					(this['arg'+i] as TextInput).includeInLayout = true;
					(this['larg'+i] as Label).visible = true;
					(this['larg'+i] as Label).includeInLayout = true;
					this['JSONV'+i].enabled = true;
					this['JSONV'+i].required = func.selectedItem.args[arg]['required'];
					
					(this['larg'+i++] as Label).text = func.selectedItem.args[arg]['name'] + (func.selectedItem.args[arg]['required'] ? "*":"");
				}
				if (func.selectedItem.docs == ""){
					(this.methodDescription as TextArea).text = "";
					(this.methodDescription as TextArea).visible = false;
					(this.methodDescription as TextArea).includeInLayout = false;
				} else {
					(this.methodDescription as TextArea).text = func.selectedItem.docs.replace(/[\n\r\f]+/g, "\n");
					(this.methodDescription as TextArea).visible = true;
					(this.methodDescription as TextArea).includeInLayout = true;
				}
			}
			
			/**
			 * calls a method on the server
			 */
			protected function execute():void
			{
				var input:TextInput;
				var argumentArray:Array = [];
				var argumentErrors:Array = Validator.validateAll(argumentValidators);
				if (argumentErrors.length != 0){
//					MonsterDebugger.trace(this, argumentErrors);
					return;
				}
				for(var i:int = 1; i < 8; i++)
				{
					input = this['arg' +i] as TextInput;
					if(input)
					{
						if (input.text.indexOf("{") == 0 || input.text.indexOf("[") == 0)
							try {
								argumentArray.push(JSON.decode(input.text));
							} catch (err:Error){
								return;
							}
						else
							argumentArray.push(input.text as String);
					}
				}
				
				
				api.exec(func.selectedLabel, argumentArray[0], argumentArray[1], argumentArray[2], argumentArray[3], argumentArray[4], argumentArray[5], argumentArray[6]);
//				MonsterDebugger.trace(this, [func.selectedLabel, argumentArray[0], argumentArray[1], argumentArray[2], argumentArray[3], argumentArray[4], argumentArray[5], argumentArray[6]]);
				push(output, time() + ": Calling "+func.selectedLabel+" with arguments - "+JSON.encode(argumentArray));
			}
			
			/**
			 * clears debug consoles
			 */
			protected function clear():void
			{
				input.text = output.text = "";
			}
			
			/**
			 * refreshes the method list
			 */
			protected function refresh():void
			{
				api.removeEventListener(Event.COMPLETE, process);
				api.addEventListener(Event.COMPLETE, handleConnection);
				api.exec(introspector);
			}
			
			/**
			 * returns timestamp string
			 */
			protected function time():String
			{
				var d:Date = new Date();
				var ret:String = d.hours+":"+d.minutes+":"+d.seconds+"."+d.milliseconds;
				return ret + "000000000000".substring(ret.length);
			}

			/**
			 * handler for specific net events
			 */
			public function netStatusHandler(event:NetStatusEvent):void 
			{
				push(input, time() + ": Error("+event.type+"): "+event.info.code+", "+event.info.description+", "+event.info.details);
			}
			
			/**
			 * handler for security errors
			 */
			public function securityErrorHandler(event:SecurityErrorEvent):void
			{
				push(input, time() + ": Error("+event.type+"): "+event.text);
			}
		
			/**
			 * handler for io errors
			 */
			public function ioErrorHandler(event:IOErrorEvent):void 
			{
				push(input, time() + ": Error("+event.type+"): "+event.text);
			}
			
			/**
			 * pushes text into a console and scrolls it down automatically
			 */
			public function push(target:TextArea, text:String):void
			{
				target.text += text + "\n";
				target.verticalScrollPosition = target.maxVerticalScrollPosition;
			}

		]]>
	</mx:Script>
	<mx:Array id="argumentValidators">
		<cv:JSONValidator id="JSONV1" required="false"  source="{arg1}"  property="text" />
		<cv:JSONValidator id="JSONV2" required="false"  source="{arg2}"  property="text" />
		<cv:JSONValidator id="JSONV3" required="false"  source="{arg3}"  property="text" />
		<cv:JSONValidator id="JSONV4" required="false"  source="{arg4}"  property="text" />
		<cv:JSONValidator id="JSONV5" required="false"  source="{arg5}"  property="text" />
		<cv:JSONValidator id="JSONV6" required="false"  source="{arg6}"  property="text" />
		<cv:JSONValidator id="JSONV7" required="false"  source="{arg7}"  property="text" />
	</mx:Array>
		

	
    <mx:TabNavigator id="maintabs" height="100%" width="100%" >
    	
	    <mx:TabNavigator label="Connect" id="loginType" borderStyle="solid" height="100%" width="100%">
			<mx:Panel label="Use Token" id="panelConnectToken">
				<mx:HBox width="100%">
					<mx:Label text="Token"/>
					<mx:TextInput id="token" text=""  width="100%"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="Remember"/>
					<mx:CheckBox id="remembertoken" width="100%"/>
				</mx:HBox>
				<mx:Label id="urllabel1" text="URL :" />
				<mx:HBox width="100%">
					<mx:Spacer width="100%" />
					<mx:Button label="Connect" click="doConnectToken()"/>
					<mx:Spacer width="100%" />
				</mx:HBox>
			</mx:Panel>
			<mx:Panel label="Use Username and Password" id="panelConnectUsername">
				<mx:HBox width="100%">
					<mx:Label text="Username"/>
					<mx:TextInput id="username" text=""  width="100%"/>
				</mx:HBox>
		
				<mx:HBox width="100%">
					<mx:Label text="Password"/>
					<mx:TextInput id="password" text="" displayAsPassword="true"  width="100%"/>
				</mx:HBox>
				<mx:HBox width="100%">
					<mx:Label text="Remember"/>
					<mx:CheckBox id="rememberpassword" width="100%"/>
				</mx:HBox>
				<mx:Label id="urllabel2" text="URL :" />
		
				<mx:HBox width="100%">
					<mx:Spacer width="100%" />
					<mx:Button label="Connect" click="doConnectUsername()"/>
					<mx:Spacer width="100%" />
				</mx:HBox>
			</mx:Panel>
		</mx:TabNavigator>
		<mx:Panel label="Service Browser" width="100%" height="100%" layout="vertical" title="Moodle AMF Service Browser" enabled="false" id="panelDebug">
			<mx:HBox width="100%">
				<mx:Label text="Func "/>
				<mx:ComboBox id="func" change="reloadArgs()">
				</mx:ComboBox>
			</mx:HBox>
			<mx:TextArea id="methodDescription" text="" width="100%" height="120"/>
			<mx:HBox width="100%">
				<mx:Label id="larg1" text="Arg 1"/>
				<mx:TextInput id="arg1" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label id="larg2" text="Arg 2"/>
				<mx:TextInput id="arg2" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label id="larg3" text="Arg 3"/>
				<mx:TextInput id="arg3" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label id="larg4" text="Arg 4"/>
				<mx:TextInput id="arg4" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label id="larg5" text="Arg 5"/>
				<mx:TextInput id="arg5" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label id="larg6" text="Arg 6"/>
				<mx:TextInput id="arg6" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label id="larg7" text="Arg 7"/>
				<mx:TextInput id="arg7" toolTip="{argumentToolTip}" width="100%"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Button id="call" label="Call" click="execute()"/>
				<mx:Button label="Clear" click="clear()"/>
			</mx:HBox>
			<mx:TextArea id="output"  width="100%" height="100"/>
			<mx:TextArea id="input"  width="100%" height="300"/>
		</mx:Panel>
    </mx:TabNavigator>
	
</mx:Application>
